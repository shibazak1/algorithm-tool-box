
# given W a capacity of a bag and array of w1,v1,...wn,vn to be the waight and the value (cost)
# of losts develop an algorithm to maximize the value of the lots taken in to the bag where
# whight of the lost does not exceed the capacity of the knapsack



def Knapsack(W,lots):

    amounts = [0]*len(lost)
    total_value = 0
    
    for i in range(len(lost)):
        if W==0:
            return (amounts,total_value)
        
        w_i = BestItem(lost)
        a = min(lots[w_i],W)
        total_value + = a*(lots[w_i-1]/lots[w_i])
        amounts[w_i-1] = a*(lots[w_i-1]/lots[w_i])
        amounts[w_i] = amounts[w_i]+a
        lots[w_i] = lots[w_i] - a
        W -= a
    return (amounts,total_value)
        
        
            
